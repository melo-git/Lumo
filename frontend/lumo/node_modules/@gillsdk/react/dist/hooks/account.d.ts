import type { Account, Address, Decoder, FetchAccountConfig, Simplify } from "gill";
import type { GillUseRpcHook } from "./types";
type RpcConfig = Simplify<Omit<FetchAccountConfig, "abortSignal">>;
type UseAccountResponse<TAddress extends string = string, TData extends Uint8Array | object = Uint8Array> = Account<TData, TAddress> & {
    exists: true;
};
type UseAccountInput<TConfig extends RpcConfig = RpcConfig, TAddress extends string = string, TDecodedData extends object = Uint8Array> = GillUseRpcHook<TConfig> & {
    /**
     * Address of the account to get the balance of
     */
    address: TAddress | Address;
    /**
     * Account decoder that can decode the account's `data` byte array value
     */
    decoder?: Decoder<TDecodedData>;
};
/**
 * Get the account info for an address using the Solana RPC method of
 * [`getAccountInfo`](https://solana.com/docs/rpc/http/getaccountinfo)
 */
export declare function useAccount<TConfig extends RpcConfig = RpcConfig, TAddress extends string = string, TDecodedData extends object = Uint8Array>({ options, config, abortSignal, address, decoder }: UseAccountInput<TConfig, TAddress, TDecodedData>): {
    account: UseAccountResponse<TAddress, TDecodedData>;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    account: UseAccountResponse<TAddress, TDecodedData>;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    account: UseAccountResponse<TAddress, TDecodedData>;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    account: UseAccountResponse<TAddress, TDecodedData>;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    account: UseAccountResponse<TAddress, TDecodedData>;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
};
export {};
//# sourceMappingURL=account.d.ts.map