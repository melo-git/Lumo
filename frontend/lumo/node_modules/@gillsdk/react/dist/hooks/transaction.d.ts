import type { GetTransactionApi, Signature, Simplify } from "gill";
import type { GillUseRpcHook } from "./types";
type RpcConfig = Simplify<Parameters<GetTransactionApi["getTransaction"]>[1]>;
type UseTransactionResponse = ReturnType<GetTransactionApi["getTransaction"]>;
type UseTransactionInput<TConfig extends RpcConfig = RpcConfig> = GillUseRpcHook<TConfig> & {
    /**
     * Transaction signature as a base-58 encoded string
     */
    signature: Signature | string;
};
/**
 * Get transaction details for a confirmed transaction using the Solana RPC method of
 * [`getTransaction`](https://solana.com/docs/rpc/http/gettransaction)
 *
 * Default `config` includes:
 * - `maxSupportedTransactionVersion` of `0`
 * - `encoding` of `json`
 */
export declare function useTransaction<TConfig extends RpcConfig = RpcConfig>({ options, config, abortSignal, signature, }: UseTransactionInput<TConfig>): {
    transaction: UseTransactionResponse;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    transaction: UseTransactionResponse;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    transaction: UseTransactionResponse;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    transaction: UseTransactionResponse;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    transaction: UseTransactionResponse;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
};
export {};
//# sourceMappingURL=transaction.d.ts.map