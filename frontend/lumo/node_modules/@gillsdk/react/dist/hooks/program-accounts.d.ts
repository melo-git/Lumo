import type { AccountInfoBase, AccountInfoWithBase58Bytes, AccountInfoWithBase58EncodedData, AccountInfoWithBase64EncodedData, AccountInfoWithBase64EncodedZStdCompressedData, AccountInfoWithJsonData, AccountInfoWithPubkey, Address, GetProgramAccountsApi, Simplify, SolanaRpcResponse } from "gill";
import type { GillUseRpcHook } from "./types";
type Encoding = "base64" | "jsonParsed" | "base64+zstd" | "base58";
type RpcConfig = Simplify<Parameters<GetProgramAccountsApi["getProgramAccounts"]>[1] & Readonly<{
    encoding?: Encoding;
}>>;
type UseProgramAccountsInput<TConfig extends RpcConfig = RpcConfig> = GillUseRpcHook<TConfig> & {
    /**
     * Address of the program used to call
     * [`getProgramAccounts`](https://solana.com/docs/rpc/http/getprogramaccounts)
     */
    program: Address | string;
};
type UseProgramAccountsResponse<TConfig extends RpcConfig> = TConfig extends {
    encoding: "base64";
    withContext: true;
} ? SolanaRpcResponse<AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase64EncodedData>[]> : TConfig extends {
    encoding: "base64";
} ? AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase64EncodedData>[] : TConfig extends {
    encoding: "base64+zstd";
    withContext: true;
} ? SolanaRpcResponse<AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase64EncodedZStdCompressedData>[]> : TConfig extends {
    encoding: "base64+zstd";
} ? AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase64EncodedZStdCompressedData>[] : TConfig extends {
    encoding: "jsonParsed";
    withContext: true;
} ? SolanaRpcResponse<AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithJsonData>[]> : TConfig extends {
    encoding: "jsonParsed";
} ? AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithJsonData>[] : TConfig extends {
    encoding: "base58";
    withContext: true;
} ? SolanaRpcResponse<AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase58EncodedData>[]> : TConfig extends {
    encoding: "base58";
} ? AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase58EncodedData>[] : TConfig extends {
    withContext: true;
} ? SolanaRpcResponse<AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase58Bytes>[]> : AccountInfoWithPubkey<AccountInfoBase & AccountInfoWithBase58Bytes>[];
/**
 * Get all the accounts owned by a `program` using the Solana RPC method of
 * [`getProgramAccounts`](https://solana.com/docs/rpc/http/getprogramaccounts)
 */
export declare function useProgramAccounts<TConfig extends RpcConfig = RpcConfig>({ options, config, abortSignal, program, }: UseProgramAccountsInput<TConfig>): {
    accounts: Simplify<UseProgramAccountsResponse<TConfig>>;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    accounts: Simplify<UseProgramAccountsResponse<TConfig>>;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    accounts: Simplify<UseProgramAccountsResponse<TConfig>>;
    error: unknown;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    accounts: Simplify<UseProgramAccountsResponse<TConfig>>;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
} | {
    accounts: Simplify<UseProgramAccountsResponse<TConfig>>;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<unknown, unknown>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<unknown>;
};
export {};
//# sourceMappingURL=program-accounts.d.ts.map