import type { BaseTransactionMessage, CompilableTransactionMessage, FullySignedTransaction, GetEpochInfoApi, GetLatestBlockhashApi, GetSignatureStatusesApi, Rpc, RpcSubscriptions, SendTransactionApi, Signature, SignatureNotificationsApi, SlotNotificationsApi, TransactionMessageWithFeePayer, TransactionWithBlockhashLifetime } from "@solana/kit";
import { Commitment } from "@solana/kit";
import { type waitForRecentTransactionConfirmation } from "@solana/transaction-confirmation";
interface SendAndConfirmTransactionWithBlockhashLifetimeConfig extends SendTransactionConfigWithoutEncoding {
    confirmRecentTransaction: (config: Omit<Parameters<typeof waitForRecentTransactionConfirmation>[0], "getBlockHeightExceedencePromise" | "getRecentSignatureConfirmationPromise">) => Promise<void>;
    abortSignal?: AbortSignal;
    commitment: Commitment;
}
type SendTransactionConfigWithoutEncoding = Omit<NonNullable<Parameters<SendTransactionApi["sendTransaction"]>[1]>, "encoding">;
type SendableTransaction = CompilableTransactionMessage | (FullySignedTransaction & TransactionWithBlockhashLifetime) | (BaseTransactionMessage & TransactionMessageWithFeePayer);
export type SendAndConfirmTransactionWithSignersFunction = (transaction: SendableTransaction, config?: Omit<SendAndConfirmTransactionWithBlockhashLifetimeConfig, "confirmRecentTransaction" | "rpc" | "transaction">) => Promise<Signature>;
type SendAndConfirmTransactionWithSignersFactoryConfig<TCluster> = {
    rpc: Rpc<GetEpochInfoApi & GetSignatureStatusesApi & SendTransactionApi & GetLatestBlockhashApi> & {
        "~cluster"?: TCluster;
    };
    rpcSubscriptions: RpcSubscriptions<SignatureNotificationsApi & SlotNotificationsApi> & {
        "~cluster"?: TCluster;
    };
};
export declare function sendAndConfirmTransactionWithSignersFactory({ rpc, rpcSubscriptions, }: SendAndConfirmTransactionWithSignersFactoryConfig<"devnet">): SendAndConfirmTransactionWithSignersFunction;
export declare function sendAndConfirmTransactionWithSignersFactory({ rpc, rpcSubscriptions, }: SendAndConfirmTransactionWithSignersFactoryConfig<"testnet">): SendAndConfirmTransactionWithSignersFunction;
export declare function sendAndConfirmTransactionWithSignersFactory({ rpc, rpcSubscriptions, }: SendAndConfirmTransactionWithSignersFactoryConfig<"mainnet">): SendAndConfirmTransactionWithSignersFunction;
export declare function sendAndConfirmTransactionWithSignersFactory({ rpc, rpcSubscriptions, }: SendAndConfirmTransactionWithSignersFactoryConfig<"localnet">): SendAndConfirmTransactionWithSignersFunction;
export {};
//# sourceMappingURL=send-and-confirm-transaction-with-signers.d.ts.map