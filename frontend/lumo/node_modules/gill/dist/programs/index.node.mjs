import { getCreatorEncoder, getCollectionEncoder, getUsesEncoder, getCollectionDetailsEncoder, getCreatorDecoder, getCollectionDecoder, getUsesDecoder, getCollectionDetailsDecoder, getDataV2Encoder, getDataV2Decoder, TOKEN_METADATA_PROGRAM_ADDRESS, getAccountMetaFactory } from '../chunk-ZYQZBNRK.node.mjs';
export { AMOUNT_TO_UI_AMOUNT_DISCRIMINATOR, APPLY_CONFIDENTIAL_PENDING_BALANCE_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, APPLY_CONFIDENTIAL_PENDING_BALANCE_DISCRIMINATOR, APPROVE_CHECKED_DISCRIMINATOR, APPROVE_CONFIDENTIAL_TRANSFER_ACCOUNT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, APPROVE_CONFIDENTIAL_TRANSFER_ACCOUNT_DISCRIMINATOR, APPROVE_DISCRIMINATOR, ASSOCIATED_TOKEN_ERROR__INVALID_OWNER, ASSOCIATED_TOKEN_PROGRAM_ADDRESS, AccountState, AssociatedTokenInstruction, AuthorityType, BURN_CHECKED_DISCRIMINATOR, BURN_DISCRIMINATOR, CLOSE_ACCOUNT_DISCRIMINATOR, CONFIDENTIAL_DEPOSIT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIDENTIAL_DEPOSIT_DISCRIMINATOR, CONFIDENTIAL_TRANSFER_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIDENTIAL_TRANSFER_WITH_FEE_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIDENTIAL_TRANSFER_WITH_FEE_DISCRIMINATOR, CONFIDENTIAL_WITHDRAW_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIDENTIAL_WITHDRAW_DISCRIMINATOR, CONFIGURE_CONFIDENTIAL_TRANSFER_ACCOUNT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, CONFIGURE_CONFIDENTIAL_TRANSFER_ACCOUNT_DISCRIMINATOR, CREATE_ASSOCIATED_TOKEN_DISCRIMINATOR, CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR, CREATE_METADATA_ACCOUNT_V3_DISCRIMINATOR, CREATE_NATIVE_MINT_DISCRIMINATOR, DISABLE_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, DISABLE_CONFIDENTIAL_CREDITS_DISCRIMINATOR, DISABLE_CPI_GUARD_CPI_GUARD_DISCRIMINATOR, DISABLE_CPI_GUARD_DISCRIMINATOR, DISABLE_HARVEST_TO_MINT_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, DISABLE_HARVEST_TO_MINT_DISCRIMINATOR, DISABLE_MEMO_TRANSFERS_DISCRIMINATOR, DISABLE_MEMO_TRANSFERS_MEMO_TRANSFERS_DISCRIMINATOR, DISABLE_NON_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, DISABLE_NON_CONFIDENTIAL_CREDITS_DISCRIMINATOR, EMIT_TOKEN_METADATA_DISCRIMINATOR, EMPTY_CONFIDENTIAL_TRANSFER_ACCOUNT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, EMPTY_CONFIDENTIAL_TRANSFER_ACCOUNT_DISCRIMINATOR, ENABLE_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, ENABLE_CONFIDENTIAL_CREDITS_DISCRIMINATOR, ENABLE_CPI_GUARD_CPI_GUARD_DISCRIMINATOR, ENABLE_CPI_GUARD_DISCRIMINATOR, ENABLE_HARVEST_TO_MINT_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, ENABLE_HARVEST_TO_MINT_DISCRIMINATOR, ENABLE_MEMO_TRANSFERS_DISCRIMINATOR, ENABLE_MEMO_TRANSFERS_MEMO_TRANSFERS_DISCRIMINATOR, ENABLE_NON_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, ENABLE_NON_CONFIDENTIAL_CREDITS_DISCRIMINATOR, ExtensionType, FREEZE_ACCOUNT_DISCRIMINATOR, GET_ACCOUNT_DATA_SIZE_DISCRIMINATOR, HARVEST_WITHHELD_TOKENS_TO_MINT_DISCRIMINATOR, HARVEST_WITHHELD_TOKENS_TO_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, HARVEST_WITHHELD_TOKENS_TO_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, HARVEST_WITHHELD_TOKENS_TO_MINT_TRANSFER_FEE_DISCRIMINATOR, INITIALIZE_ACCOUNT2_DISCRIMINATOR, INITIALIZE_ACCOUNT3_DISCRIMINATOR, INITIALIZE_ACCOUNT_DISCRIMINATOR, INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR, INITIALIZE_DEFAULT_ACCOUNT_STATE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR, INITIALIZE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR, INITIALIZE_GROUP_MEMBER_POINTER_DISCRIMINATOR, INITIALIZE_GROUP_MEMBER_POINTER_GROUP_MEMBER_POINTER_DISCRIMINATOR, INITIALIZE_GROUP_POINTER_DISCRIMINATOR, INITIALIZE_GROUP_POINTER_GROUP_POINTER_DISCRIMINATOR, INITIALIZE_IMMUTABLE_OWNER_DISCRIMINATOR, INITIALIZE_INTEREST_BEARING_MINT_DISCRIMINATOR, INITIALIZE_INTEREST_BEARING_MINT_INTEREST_BEARING_MINT_DISCRIMINATOR, INITIALIZE_METADATA_POINTER_DISCRIMINATOR, INITIALIZE_METADATA_POINTER_METADATA_POINTER_DISCRIMINATOR, INITIALIZE_MINT2_DISCRIMINATOR, INITIALIZE_MINT_CLOSE_AUTHORITY_DISCRIMINATOR, INITIALIZE_MINT_DISCRIMINATOR, INITIALIZE_MULTISIG2_DISCRIMINATOR, INITIALIZE_MULTISIG_DISCRIMINATOR, INITIALIZE_NON_TRANSFERABLE_MINT_DISCRIMINATOR, INITIALIZE_PAUSABLE_CONFIG_DISCRIMINATOR, INITIALIZE_PAUSABLE_CONFIG_PAUSABLE_DISCRIMINATOR, INITIALIZE_PERMANENT_DELEGATE_DISCRIMINATOR, INITIALIZE_SCALED_UI_AMOUNT_MINT_DISCRIMINATOR, INITIALIZE_SCALED_UI_AMOUNT_MINT_SCALED_UI_AMOUNT_MINT_DISCRIMINATOR, INITIALIZE_TOKEN_GROUP_DISCRIMINATOR, INITIALIZE_TOKEN_GROUP_MEMBER_DISCRIMINATOR, INITIALIZE_TOKEN_METADATA_DISCRIMINATOR, INITIALIZE_TRANSFER_FEE_CONFIG_DISCRIMINATOR, INITIALIZE_TRANSFER_FEE_CONFIG_TRANSFER_FEE_DISCRIMINATOR, INITIALIZE_TRANSFER_HOOK_DISCRIMINATOR, INITIALIZE_TRANSFER_HOOK_TRANSFER_HOOK_DISCRIMINATOR, MINT_TO_CHECKED_DISCRIMINATOR, MINT_TO_DISCRIMINATOR, PAUSE_DISCRIMINATOR, PAUSE_PAUSABLE_DISCRIMINATOR, REALLOCATE_DISCRIMINATOR, RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR, REMOVE_TOKEN_METADATA_KEY_DISCRIMINATOR, RESUME_DISCRIMINATOR, RESUME_PAUSABLE_DISCRIMINATOR, REVOKE_DISCRIMINATOR, SET_AUTHORITY_DISCRIMINATOR, SET_TRANSFER_FEE_DISCRIMINATOR, SET_TRANSFER_FEE_TRANSFER_FEE_DISCRIMINATOR, SYNC_NATIVE_DISCRIMINATOR, THAW_ACCOUNT_DISCRIMINATOR, TOKEN_2022_ERROR__ACCOUNT_FROZEN, TOKEN_2022_ERROR__ALREADY_IN_USE, TOKEN_2022_ERROR__AUTHORITY_TYPE_NOT_SUPPORTED, TOKEN_2022_ERROR__FIXED_SUPPLY, TOKEN_2022_ERROR__INSUFFICIENT_FUNDS, TOKEN_2022_ERROR__INVALID_INSTRUCTION, TOKEN_2022_ERROR__INVALID_MINT, TOKEN_2022_ERROR__INVALID_NUMBER_OF_PROVIDED_SIGNERS, TOKEN_2022_ERROR__INVALID_NUMBER_OF_REQUIRED_SIGNERS, TOKEN_2022_ERROR__INVALID_STATE, TOKEN_2022_ERROR__MINT_CANNOT_FREEZE, TOKEN_2022_ERROR__MINT_DECIMALS_MISMATCH, TOKEN_2022_ERROR__MINT_MISMATCH, TOKEN_2022_ERROR__NATIVE_NOT_SUPPORTED, TOKEN_2022_ERROR__NON_NATIVE_HAS_BALANCE, TOKEN_2022_ERROR__NON_NATIVE_NOT_SUPPORTED, TOKEN_2022_ERROR__NOT_RENT_EXEMPT, TOKEN_2022_ERROR__OVERFLOW, TOKEN_2022_ERROR__OWNER_MISMATCH, TOKEN_2022_ERROR__UNINITIALIZED_STATE, TOKEN_2022_PROGRAM_ADDRESS, TOKEN_METADATA_PROGRAM_ADDRESS, TOKEN_PROGRAM_ADDRESS, TRANSFER_CHECKED_DISCRIMINATOR, TRANSFER_CHECKED_WITH_FEE_DISCRIMINATOR, TRANSFER_CHECKED_WITH_FEE_TRANSFER_FEE_DISCRIMINATOR, TRANSFER_DISCRIMINATOR, Token2022Account, Token2022Instruction, TokenMetadataAccount, TokenMetadataInstruction, UI_AMOUNT_TO_AMOUNT_DISCRIMINATOR, UPDATE_CONFIDENTIAL_TRANSFER_MINT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR, UPDATE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR, UPDATE_DEFAULT_ACCOUNT_STATE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR, UPDATE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR, UPDATE_GROUP_MEMBER_POINTER_DISCRIMINATOR, UPDATE_GROUP_MEMBER_POINTER_GROUP_MEMBER_POINTER_DISCRIMINATOR, UPDATE_GROUP_POINTER_DISCRIMINATOR, UPDATE_GROUP_POINTER_GROUP_POINTER_DISCRIMINATOR, UPDATE_METADATA_POINTER_DISCRIMINATOR, UPDATE_METADATA_POINTER_METADATA_POINTER_DISCRIMINATOR, UPDATE_MULTIPLIER_SCALED_UI_MINT_DISCRIMINATOR, UPDATE_MULTIPLIER_SCALED_UI_MINT_SCALED_UI_AMOUNT_MINT_DISCRIMINATOR, UPDATE_RATE_INTEREST_BEARING_MINT_DISCRIMINATOR, UPDATE_RATE_INTEREST_BEARING_MINT_INTEREST_BEARING_MINT_DISCRIMINATOR, UPDATE_TOKEN_GROUP_MAX_SIZE_DISCRIMINATOR, UPDATE_TOKEN_GROUP_UPDATE_AUTHORITY_DISCRIMINATOR, UPDATE_TOKEN_METADATA_FIELD_DISCRIMINATOR, UPDATE_TOKEN_METADATA_UPDATE_AUTHORITY_DISCRIMINATOR, UPDATE_TRANSFER_HOOK_DISCRIMINATOR, UPDATE_TRANSFER_HOOK_TRANSFER_HOOK_DISCRIMINATOR, UseMethod, WITHDRAW_EXCESS_LAMPORTS_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_FOR_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_FOR_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_TRANSFER_FEE_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_MINT_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR, WITHDRAW_WITHHELD_TOKENS_FROM_MINT_TRANSFER_FEE_DISCRIMINATOR, amountToUiAmountForInterestBearingMintWithoutSimulation, amountToUiAmountForMintWithoutSimulation, amountToUiAmountForScaledUiAmountMintWithoutSimulation, assertIsSupportedTokenProgram, buildCreateTokenTransaction, buildMintTokensTransaction, buildTransferTokensTransaction, checkedTokenProgramAddress, collectionDetails, decodeMint, decodeMultisig, decodeToken, extension, fetchAllMaybeMint, fetchAllMaybeMultisig, fetchAllMaybeToken, fetchAllMint, fetchAllMultisig, fetchAllToken, fetchMaybeMint, fetchMaybeMultisig, fetchMaybeToken, fetchMint, fetchMultisig, fetchToken, findAssociatedTokenPda, getAccountStateCodec, getAccountStateDecoder, getAccountStateEncoder, getAmountToUiAmountDiscriminatorBytes, getAmountToUiAmountInstruction, getAmountToUiAmountInstructionDataCodec, getAmountToUiAmountInstructionDataDecoder, getAmountToUiAmountInstructionDataEncoder, getApplyConfidentialPendingBalanceConfidentialTransferDiscriminatorBytes, getApplyConfidentialPendingBalanceDiscriminatorBytes, getApplyConfidentialPendingBalanceInstruction, getApplyConfidentialPendingBalanceInstructionDataCodec, getApplyConfidentialPendingBalanceInstructionDataDecoder, getApplyConfidentialPendingBalanceInstructionDataEncoder, getApproveCheckedDiscriminatorBytes, getApproveCheckedInstruction, getApproveCheckedInstructionDataCodec, getApproveCheckedInstructionDataDecoder, getApproveCheckedInstructionDataEncoder, getApproveConfidentialTransferAccountConfidentialTransferDiscriminatorBytes, getApproveConfidentialTransferAccountDiscriminatorBytes, getApproveConfidentialTransferAccountInstruction, getApproveConfidentialTransferAccountInstructionDataCodec, getApproveConfidentialTransferAccountInstructionDataDecoder, getApproveConfidentialTransferAccountInstructionDataEncoder, getApproveDiscriminatorBytes, getApproveInstruction, getApproveInstructionDataCodec, getApproveInstructionDataDecoder, getApproveInstructionDataEncoder, getAssociatedTokenAccountAddress, getAssociatedTokenErrorMessage, getAuthorityTypeCodec, getAuthorityTypeDecoder, getAuthorityTypeEncoder, getBurnCheckedDiscriminatorBytes, getBurnCheckedInstruction, getBurnCheckedInstructionDataCodec, getBurnCheckedInstructionDataDecoder, getBurnCheckedInstructionDataEncoder, getBurnDiscriminatorBytes, getBurnInstruction, getBurnInstructionDataCodec, getBurnInstructionDataDecoder, getBurnInstructionDataEncoder, getCloseAccountDiscriminatorBytes, getCloseAccountInstruction, getCloseAccountInstructionDataCodec, getCloseAccountInstructionDataDecoder, getCloseAccountInstructionDataEncoder, getCollectionCodec, getCollectionDecoder, getCollectionDetailsCodec, getCollectionDetailsDecoder, getCollectionDetailsEncoder, getCollectionEncoder, getConfidentialDepositConfidentialTransferDiscriminatorBytes, getConfidentialDepositDiscriminatorBytes, getConfidentialDepositInstruction, getConfidentialDepositInstructionDataCodec, getConfidentialDepositInstructionDataDecoder, getConfidentialDepositInstructionDataEncoder, getConfidentialTransferConfidentialTransferDiscriminatorBytes, getConfidentialTransferDiscriminatorBytes, getConfidentialTransferInstruction, getConfidentialTransferInstructionDataCodec, getConfidentialTransferInstructionDataDecoder, getConfidentialTransferInstructionDataEncoder, getConfidentialTransferWithFeeConfidentialTransferDiscriminatorBytes, getConfidentialTransferWithFeeDiscriminatorBytes, getConfidentialTransferWithFeeInstruction, getConfidentialTransferWithFeeInstructionDataCodec, getConfidentialTransferWithFeeInstructionDataDecoder, getConfidentialTransferWithFeeInstructionDataEncoder, getConfidentialWithdrawConfidentialTransferDiscriminatorBytes, getConfidentialWithdrawDiscriminatorBytes, getConfidentialWithdrawInstruction, getConfidentialWithdrawInstructionDataCodec, getConfidentialWithdrawInstructionDataDecoder, getConfidentialWithdrawInstructionDataEncoder, getConfigureConfidentialTransferAccountConfidentialTransferDiscriminatorBytes, getConfigureConfidentialTransferAccountDiscriminatorBytes, getConfigureConfidentialTransferAccountInstruction, getConfigureConfidentialTransferAccountInstructionDataCodec, getConfigureConfidentialTransferAccountInstructionDataDecoder, getConfigureConfidentialTransferAccountInstructionDataEncoder, getCreateAssociatedTokenDiscriminatorBytes, getCreateAssociatedTokenIdempotentDiscriminatorBytes, getCreateAssociatedTokenIdempotentInstruction, getCreateAssociatedTokenIdempotentInstructionAsync, getCreateAssociatedTokenIdempotentInstructionDataCodec, getCreateAssociatedTokenIdempotentInstructionDataDecoder, getCreateAssociatedTokenIdempotentInstructionDataEncoder, getCreateAssociatedTokenInstruction, getCreateAssociatedTokenInstructionAsync, getCreateAssociatedTokenInstructionDataCodec, getCreateAssociatedTokenInstructionDataDecoder, getCreateAssociatedTokenInstructionDataEncoder, getCreateMetadataAccountV3DiscriminatorBytes, getCreateMetadataAccountV3Instruction, getCreateMetadataAccountV3InstructionDataCodec, getCreateMetadataAccountV3InstructionDataDecoder, getCreateMetadataAccountV3InstructionDataEncoder, getCreateNativeMintDiscriminatorBytes, getCreateNativeMintInstruction, getCreateNativeMintInstructionDataCodec, getCreateNativeMintInstructionDataDecoder, getCreateNativeMintInstructionDataEncoder, getCreateTokenInstructions, getCreatorCodec, getCreatorDecoder, getCreatorEncoder, getDataV2Codec, getDataV2Decoder, getDataV2Encoder, getDecryptableBalanceCodec, getDecryptableBalanceDecoder, getDecryptableBalanceEncoder, getDisableConfidentialCreditsConfidentialTransferDiscriminatorBytes, getDisableConfidentialCreditsDiscriminatorBytes, getDisableConfidentialCreditsInstruction, getDisableConfidentialCreditsInstructionDataCodec, getDisableConfidentialCreditsInstructionDataDecoder, getDisableConfidentialCreditsInstructionDataEncoder, getDisableCpiGuardCpiGuardDiscriminatorBytes, getDisableCpiGuardDiscriminatorBytes, getDisableCpiGuardInstruction, getDisableCpiGuardInstructionDataCodec, getDisableCpiGuardInstructionDataDecoder, getDisableCpiGuardInstructionDataEncoder, getDisableHarvestToMintConfidentialTransferFeeDiscriminatorBytes, getDisableHarvestToMintDiscriminatorBytes, getDisableHarvestToMintInstruction, getDisableHarvestToMintInstructionDataCodec, getDisableHarvestToMintInstructionDataDecoder, getDisableHarvestToMintInstructionDataEncoder, getDisableMemoTransfersDiscriminatorBytes, getDisableMemoTransfersInstruction, getDisableMemoTransfersInstructionDataCodec, getDisableMemoTransfersInstructionDataDecoder, getDisableMemoTransfersInstructionDataEncoder, getDisableMemoTransfersMemoTransfersDiscriminatorBytes, getDisableNonConfidentialCreditsConfidentialTransferDiscriminatorBytes, getDisableNonConfidentialCreditsDiscriminatorBytes, getDisableNonConfidentialCreditsInstruction, getDisableNonConfidentialCreditsInstructionDataCodec, getDisableNonConfidentialCreditsInstructionDataDecoder, getDisableNonConfidentialCreditsInstructionDataEncoder, getEmitTokenMetadataDiscriminatorBytes, getEmitTokenMetadataInstruction, getEmitTokenMetadataInstructionDataCodec, getEmitTokenMetadataInstructionDataDecoder, getEmitTokenMetadataInstructionDataEncoder, getEmptyConfidentialTransferAccountConfidentialTransferDiscriminatorBytes, getEmptyConfidentialTransferAccountDiscriminatorBytes, getEmptyConfidentialTransferAccountInstruction, getEmptyConfidentialTransferAccountInstructionDataCodec, getEmptyConfidentialTransferAccountInstructionDataDecoder, getEmptyConfidentialTransferAccountInstructionDataEncoder, getEnableConfidentialCreditsConfidentialTransferDiscriminatorBytes, getEnableConfidentialCreditsDiscriminatorBytes, getEnableConfidentialCreditsInstruction, getEnableConfidentialCreditsInstructionDataCodec, getEnableConfidentialCreditsInstructionDataDecoder, getEnableConfidentialCreditsInstructionDataEncoder, getEnableCpiGuardCpiGuardDiscriminatorBytes, getEnableCpiGuardDiscriminatorBytes, getEnableCpiGuardInstruction, getEnableCpiGuardInstructionDataCodec, getEnableCpiGuardInstructionDataDecoder, getEnableCpiGuardInstructionDataEncoder, getEnableHarvestToMintConfidentialTransferFeeDiscriminatorBytes, getEnableHarvestToMintDiscriminatorBytes, getEnableHarvestToMintInstruction, getEnableHarvestToMintInstructionDataCodec, getEnableHarvestToMintInstructionDataDecoder, getEnableHarvestToMintInstructionDataEncoder, getEnableMemoTransfersDiscriminatorBytes, getEnableMemoTransfersInstruction, getEnableMemoTransfersInstructionDataCodec, getEnableMemoTransfersInstructionDataDecoder, getEnableMemoTransfersInstructionDataEncoder, getEnableMemoTransfersMemoTransfersDiscriminatorBytes, getEnableNonConfidentialCreditsConfidentialTransferDiscriminatorBytes, getEnableNonConfidentialCreditsDiscriminatorBytes, getEnableNonConfidentialCreditsInstruction, getEnableNonConfidentialCreditsInstructionDataCodec, getEnableNonConfidentialCreditsInstructionDataDecoder, getEnableNonConfidentialCreditsInstructionDataEncoder, getEncryptedBalanceCodec, getEncryptedBalanceDecoder, getEncryptedBalanceEncoder, getExtensionCodec, getExtensionDecoder, getExtensionEncoder, getExtensionTypeCodec, getExtensionTypeDecoder, getExtensionTypeEncoder, getFreezeAccountDiscriminatorBytes, getFreezeAccountInstruction, getFreezeAccountInstructionDataCodec, getFreezeAccountInstructionDataDecoder, getFreezeAccountInstructionDataEncoder, getGetAccountDataSizeDiscriminatorBytes, getGetAccountDataSizeInstruction, getGetAccountDataSizeInstructionDataCodec, getGetAccountDataSizeInstructionDataDecoder, getGetAccountDataSizeInstructionDataEncoder, getHarvestWithheldTokensToMintDiscriminatorBytes, getHarvestWithheldTokensToMintForConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes, getHarvestWithheldTokensToMintForConfidentialTransferFeeDiscriminatorBytes, getHarvestWithheldTokensToMintForConfidentialTransferFeeInstruction, getHarvestWithheldTokensToMintForConfidentialTransferFeeInstructionDataCodec, getHarvestWithheldTokensToMintForConfidentialTransferFeeInstructionDataDecoder, getHarvestWithheldTokensToMintForConfidentialTransferFeeInstructionDataEncoder, getHarvestWithheldTokensToMintInstruction, getHarvestWithheldTokensToMintInstructionDataCodec, getHarvestWithheldTokensToMintInstructionDataDecoder, getHarvestWithheldTokensToMintInstructionDataEncoder, getHarvestWithheldTokensToMintTransferFeeDiscriminatorBytes, getInitializeAccount2DiscriminatorBytes, getInitializeAccount2Instruction, getInitializeAccount2InstructionDataCodec, getInitializeAccount2InstructionDataDecoder, getInitializeAccount2InstructionDataEncoder, getInitializeAccount3DiscriminatorBytes, getInitializeAccount3Instruction, getInitializeAccount3InstructionDataCodec, getInitializeAccount3InstructionDataDecoder, getInitializeAccount3InstructionDataEncoder, getInitializeAccountDiscriminatorBytes, getInitializeAccountInstruction, getInitializeAccountInstructionDataCodec, getInitializeAccountInstructionDataDecoder, getInitializeAccountInstructionDataEncoder, getInitializeConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes, getInitializeConfidentialTransferFeeDiscriminatorBytes, getInitializeConfidentialTransferFeeInstruction, getInitializeConfidentialTransferFeeInstructionDataCodec, getInitializeConfidentialTransferFeeInstructionDataDecoder, getInitializeConfidentialTransferFeeInstructionDataEncoder, getInitializeConfidentialTransferMintConfidentialTransferDiscriminatorBytes, getInitializeConfidentialTransferMintDiscriminatorBytes, getInitializeConfidentialTransferMintInstruction, getInitializeConfidentialTransferMintInstructionDataCodec, getInitializeConfidentialTransferMintInstructionDataDecoder, getInitializeConfidentialTransferMintInstructionDataEncoder, getInitializeDefaultAccountStateDefaultAccountStateDiscriminatorBytes, getInitializeDefaultAccountStateDiscriminatorBytes, getInitializeDefaultAccountStateInstruction, getInitializeDefaultAccountStateInstructionDataCodec, getInitializeDefaultAccountStateInstructionDataDecoder, getInitializeDefaultAccountStateInstructionDataEncoder, getInitializeGroupMemberPointerDiscriminatorBytes, getInitializeGroupMemberPointerGroupMemberPointerDiscriminatorBytes, getInitializeGroupMemberPointerInstruction, getInitializeGroupMemberPointerInstructionDataCodec, getInitializeGroupMemberPointerInstructionDataDecoder, getInitializeGroupMemberPointerInstructionDataEncoder, getInitializeGroupPointerDiscriminatorBytes, getInitializeGroupPointerGroupPointerDiscriminatorBytes, getInitializeGroupPointerInstruction, getInitializeGroupPointerInstructionDataCodec, getInitializeGroupPointerInstructionDataDecoder, getInitializeGroupPointerInstructionDataEncoder, getInitializeImmutableOwnerDiscriminatorBytes, getInitializeImmutableOwnerInstruction, getInitializeImmutableOwnerInstructionDataCodec, getInitializeImmutableOwnerInstructionDataDecoder, getInitializeImmutableOwnerInstructionDataEncoder, getInitializeInterestBearingMintDiscriminatorBytes, getInitializeInterestBearingMintInstruction, getInitializeInterestBearingMintInstructionDataCodec, getInitializeInterestBearingMintInstructionDataDecoder, getInitializeInterestBearingMintInstructionDataEncoder, getInitializeInterestBearingMintInterestBearingMintDiscriminatorBytes, getInitializeMetadataPointerDiscriminatorBytes, getInitializeMetadataPointerInstruction, getInitializeMetadataPointerInstructionDataCodec, getInitializeMetadataPointerInstructionDataDecoder, getInitializeMetadataPointerInstructionDataEncoder, getInitializeMetadataPointerMetadataPointerDiscriminatorBytes, getInitializeMint2DiscriminatorBytes, getInitializeMint2Instruction, getInitializeMint2InstructionDataCodec, getInitializeMint2InstructionDataDecoder, getInitializeMint2InstructionDataEncoder, getInitializeMintCloseAuthorityDiscriminatorBytes, getInitializeMintCloseAuthorityInstruction, getInitializeMintCloseAuthorityInstructionDataCodec, getInitializeMintCloseAuthorityInstructionDataDecoder, getInitializeMintCloseAuthorityInstructionDataEncoder, getInitializeMintDiscriminatorBytes, getInitializeMintInstruction, getInitializeMintInstructionDataCodec, getInitializeMintInstructionDataDecoder, getInitializeMintInstructionDataEncoder, getInitializeMultisig2DiscriminatorBytes, getInitializeMultisig2Instruction, getInitializeMultisig2InstructionDataCodec, getInitializeMultisig2InstructionDataDecoder, getInitializeMultisig2InstructionDataEncoder, getInitializeMultisigDiscriminatorBytes, getInitializeMultisigInstruction, getInitializeMultisigInstructionDataCodec, getInitializeMultisigInstructionDataDecoder, getInitializeMultisigInstructionDataEncoder, getInitializeNonTransferableMintDiscriminatorBytes, getInitializeNonTransferableMintInstruction, getInitializeNonTransferableMintInstructionDataCodec, getInitializeNonTransferableMintInstructionDataDecoder, getInitializeNonTransferableMintInstructionDataEncoder, getInitializePausableConfigDiscriminatorBytes, getInitializePausableConfigInstruction, getInitializePausableConfigInstructionDataCodec, getInitializePausableConfigInstructionDataDecoder, getInitializePausableConfigInstructionDataEncoder, getInitializePausableConfigPausableDiscriminatorBytes, getInitializePermanentDelegateDiscriminatorBytes, getInitializePermanentDelegateInstruction, getInitializePermanentDelegateInstructionDataCodec, getInitializePermanentDelegateInstructionDataDecoder, getInitializePermanentDelegateInstructionDataEncoder, getInitializeScaledUiAmountMintDiscriminatorBytes, getInitializeScaledUiAmountMintInstruction, getInitializeScaledUiAmountMintInstructionDataCodec, getInitializeScaledUiAmountMintInstructionDataDecoder, getInitializeScaledUiAmountMintInstructionDataEncoder, getInitializeScaledUiAmountMintScaledUiAmountMintDiscriminatorBytes, getInitializeTokenGroupDiscriminatorBytes, getInitializeTokenGroupInstruction, getInitializeTokenGroupInstructionDataCodec, getInitializeTokenGroupInstructionDataDecoder, getInitializeTokenGroupInstructionDataEncoder, getInitializeTokenGroupMemberDiscriminatorBytes, getInitializeTokenGroupMemberInstruction, getInitializeTokenGroupMemberInstructionDataCodec, getInitializeTokenGroupMemberInstructionDataDecoder, getInitializeTokenGroupMemberInstructionDataEncoder, getInitializeTokenMetadataDiscriminatorBytes, getInitializeTokenMetadataInstruction, getInitializeTokenMetadataInstructionDataCodec, getInitializeTokenMetadataInstructionDataDecoder, getInitializeTokenMetadataInstructionDataEncoder, getInitializeTransferFeeConfigDiscriminatorBytes, getInitializeTransferFeeConfigInstruction, getInitializeTransferFeeConfigInstructionDataCodec, getInitializeTransferFeeConfigInstructionDataDecoder, getInitializeTransferFeeConfigInstructionDataEncoder, getInitializeTransferFeeConfigTransferFeeDiscriminatorBytes, getInitializeTransferHookDiscriminatorBytes, getInitializeTransferHookInstruction, getInitializeTransferHookInstructionDataCodec, getInitializeTransferHookInstructionDataDecoder, getInitializeTransferHookInstructionDataEncoder, getInitializeTransferHookTransferHookDiscriminatorBytes, getMintCodec, getMintDecoder, getMintEncoder, getMintSize, getMintToCheckedDiscriminatorBytes, getMintToCheckedInstruction, getMintToCheckedInstructionDataCodec, getMintToCheckedInstructionDataDecoder, getMintToCheckedInstructionDataEncoder, getMintToDiscriminatorBytes, getMintToInstruction, getMintToInstructionDataCodec, getMintToInstructionDataDecoder, getMintToInstructionDataEncoder, getMintTokensInstructions, getMultisigCodec, getMultisigDecoder, getMultisigEncoder, getMultisigSize, getPauseDiscriminatorBytes, getPauseInstruction, getPauseInstructionDataCodec, getPauseInstructionDataDecoder, getPauseInstructionDataEncoder, getPausePausableDiscriminatorBytes, getPostInitializeInstructionsForMintExtensions, getPostInitializeInstructionsForTokenExtensions, getPreInitializeInstructionsForMintExtensions, getReallocateDiscriminatorBytes, getReallocateInstruction, getReallocateInstructionDataCodec, getReallocateInstructionDataDecoder, getReallocateInstructionDataEncoder, getRecoverNestedAssociatedTokenDiscriminatorBytes, getRecoverNestedAssociatedTokenInstruction, getRecoverNestedAssociatedTokenInstructionAsync, getRecoverNestedAssociatedTokenInstructionDataCodec, getRecoverNestedAssociatedTokenInstructionDataDecoder, getRecoverNestedAssociatedTokenInstructionDataEncoder, getRemoveTokenMetadataKeyDiscriminatorBytes, getRemoveTokenMetadataKeyInstruction, getRemoveTokenMetadataKeyInstructionDataCodec, getRemoveTokenMetadataKeyInstructionDataDecoder, getRemoveTokenMetadataKeyInstructionDataEncoder, getResumeDiscriminatorBytes, getResumeInstruction, getResumeInstructionDataCodec, getResumeInstructionDataDecoder, getResumeInstructionDataEncoder, getResumePausableDiscriminatorBytes, getRevokeDiscriminatorBytes, getRevokeInstruction, getRevokeInstructionDataCodec, getRevokeInstructionDataDecoder, getRevokeInstructionDataEncoder, getSetAuthorityDiscriminatorBytes, getSetAuthorityInstruction, getSetAuthorityInstructionDataCodec, getSetAuthorityInstructionDataDecoder, getSetAuthorityInstructionDataEncoder, getSetTransferFeeDiscriminatorBytes, getSetTransferFeeInstruction, getSetTransferFeeInstructionDataCodec, getSetTransferFeeInstructionDataDecoder, getSetTransferFeeInstructionDataEncoder, getSetTransferFeeTransferFeeDiscriminatorBytes, getSyncNativeDiscriminatorBytes, getSyncNativeInstruction, getSyncNativeInstructionDataCodec, getSyncNativeInstructionDataDecoder, getSyncNativeInstructionDataEncoder, getThawAccountDiscriminatorBytes, getThawAccountInstruction, getThawAccountInstructionDataCodec, getThawAccountInstructionDataDecoder, getThawAccountInstructionDataEncoder, getToken2022ErrorMessage, getTokenCodec, getTokenDecoder, getTokenEncoder, getTokenMetadataAddress, getTokenMetadataFieldCodec, getTokenMetadataFieldDecoder, getTokenMetadataFieldEncoder, getTokenSize, getTransferCheckedDiscriminatorBytes, getTransferCheckedInstruction, getTransferCheckedInstructionDataCodec, getTransferCheckedInstructionDataDecoder, getTransferCheckedInstructionDataEncoder, getTransferCheckedWithFeeDiscriminatorBytes, getTransferCheckedWithFeeInstruction, getTransferCheckedWithFeeInstructionDataCodec, getTransferCheckedWithFeeInstructionDataDecoder, getTransferCheckedWithFeeInstructionDataEncoder, getTransferCheckedWithFeeTransferFeeDiscriminatorBytes, getTransferDiscriminatorBytes, getTransferFeeCodec, getTransferFeeDecoder, getTransferFeeEncoder, getTransferInstruction, getTransferInstructionDataCodec, getTransferInstructionDataDecoder, getTransferInstructionDataEncoder, getTransferTokensInstructions, getUiAmountToAmountDiscriminatorBytes, getUiAmountToAmountInstruction, getUiAmountToAmountInstructionDataCodec, getUiAmountToAmountInstructionDataDecoder, getUiAmountToAmountInstructionDataEncoder, getUpdateConfidentialTransferMintConfidentialTransferDiscriminatorBytes, getUpdateConfidentialTransferMintDiscriminatorBytes, getUpdateConfidentialTransferMintInstruction, getUpdateConfidentialTransferMintInstructionDataCodec, getUpdateConfidentialTransferMintInstructionDataDecoder, getUpdateConfidentialTransferMintInstructionDataEncoder, getUpdateDefaultAccountStateDefaultAccountStateDiscriminatorBytes, getUpdateDefaultAccountStateDiscriminatorBytes, getUpdateDefaultAccountStateInstruction, getUpdateDefaultAccountStateInstructionDataCodec, getUpdateDefaultAccountStateInstructionDataDecoder, getUpdateDefaultAccountStateInstructionDataEncoder, getUpdateGroupMemberPointerDiscriminatorBytes, getUpdateGroupMemberPointerGroupMemberPointerDiscriminatorBytes, getUpdateGroupMemberPointerInstruction, getUpdateGroupMemberPointerInstructionDataCodec, getUpdateGroupMemberPointerInstructionDataDecoder, getUpdateGroupMemberPointerInstructionDataEncoder, getUpdateGroupPointerDiscriminatorBytes, getUpdateGroupPointerGroupPointerDiscriminatorBytes, getUpdateGroupPointerInstruction, getUpdateGroupPointerInstructionDataCodec, getUpdateGroupPointerInstructionDataDecoder, getUpdateGroupPointerInstructionDataEncoder, getUpdateMetadataPointerDiscriminatorBytes, getUpdateMetadataPointerInstruction, getUpdateMetadataPointerInstructionDataCodec, getUpdateMetadataPointerInstructionDataDecoder, getUpdateMetadataPointerInstructionDataEncoder, getUpdateMetadataPointerMetadataPointerDiscriminatorBytes, getUpdateMultiplierScaledUiMintDiscriminatorBytes, getUpdateMultiplierScaledUiMintInstruction, getUpdateMultiplierScaledUiMintInstructionDataCodec, getUpdateMultiplierScaledUiMintInstructionDataDecoder, getUpdateMultiplierScaledUiMintInstructionDataEncoder, getUpdateMultiplierScaledUiMintScaledUiAmountMintDiscriminatorBytes, getUpdateRateInterestBearingMintDiscriminatorBytes, getUpdateRateInterestBearingMintInstruction, getUpdateRateInterestBearingMintInstructionDataCodec, getUpdateRateInterestBearingMintInstructionDataDecoder, getUpdateRateInterestBearingMintInstructionDataEncoder, getUpdateRateInterestBearingMintInterestBearingMintDiscriminatorBytes, getUpdateTokenGroupMaxSizeDiscriminatorBytes, getUpdateTokenGroupMaxSizeInstruction, getUpdateTokenGroupMaxSizeInstructionDataCodec, getUpdateTokenGroupMaxSizeInstructionDataDecoder, getUpdateTokenGroupMaxSizeInstructionDataEncoder, getUpdateTokenGroupUpdateAuthorityDiscriminatorBytes, getUpdateTokenGroupUpdateAuthorityInstruction, getUpdateTokenGroupUpdateAuthorityInstructionDataCodec, getUpdateTokenGroupUpdateAuthorityInstructionDataDecoder, getUpdateTokenGroupUpdateAuthorityInstructionDataEncoder, getUpdateTokenMetadataFieldDiscriminatorBytes, getUpdateTokenMetadataFieldInstruction, getUpdateTokenMetadataFieldInstructionDataCodec, getUpdateTokenMetadataFieldInstructionDataDecoder, getUpdateTokenMetadataFieldInstructionDataEncoder, getUpdateTokenMetadataUpdateAuthorityDiscriminatorBytes, getUpdateTokenMetadataUpdateAuthorityInstruction, getUpdateTokenMetadataUpdateAuthorityInstructionDataCodec, getUpdateTokenMetadataUpdateAuthorityInstructionDataDecoder, getUpdateTokenMetadataUpdateAuthorityInstructionDataEncoder, getUpdateTransferHookDiscriminatorBytes, getUpdateTransferHookInstruction, getUpdateTransferHookInstructionDataCodec, getUpdateTransferHookInstructionDataDecoder, getUpdateTransferHookInstructionDataEncoder, getUpdateTransferHookTransferHookDiscriminatorBytes, getUseMethodCodec, getUseMethodDecoder, getUseMethodEncoder, getUsesCodec, getUsesDecoder, getUsesEncoder, getWithdrawExcessLamportsDiscriminatorBytes, getWithdrawExcessLamportsInstruction, getWithdrawExcessLamportsInstructionDataCodec, getWithdrawExcessLamportsInstructionDataDecoder, getWithdrawExcessLamportsInstructionDataEncoder, getWithdrawWithheldTokensFromAccountsDiscriminatorBytes, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeDiscriminatorBytes, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeInstruction, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeInstructionDataCodec, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeInstructionDataDecoder, getWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeInstructionDataEncoder, getWithdrawWithheldTokensFromAccountsInstruction, getWithdrawWithheldTokensFromAccountsInstructionDataCodec, getWithdrawWithheldTokensFromAccountsInstructionDataDecoder, getWithdrawWithheldTokensFromAccountsInstructionDataEncoder, getWithdrawWithheldTokensFromAccountsTransferFeeDiscriminatorBytes, getWithdrawWithheldTokensFromMintDiscriminatorBytes, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeDiscriminatorBytes, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataCodec, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataDecoder, getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataEncoder, getWithdrawWithheldTokensFromMintInstruction, getWithdrawWithheldTokensFromMintInstructionDataCodec, getWithdrawWithheldTokensFromMintInstructionDataDecoder, getWithdrawWithheldTokensFromMintInstructionDataEncoder, getWithdrawWithheldTokensFromMintTransferFeeDiscriminatorBytes, identifyAssociatedTokenInstruction, identifyToken2022Account, identifyToken2022Instruction, isAssociatedTokenError, isCollectionDetails, isExtension, isToken2022Error, isTokenMetadataField, parseAmountToUiAmountInstruction, parseApplyConfidentialPendingBalanceInstruction, parseApproveCheckedInstruction, parseApproveConfidentialTransferAccountInstruction, parseApproveInstruction, parseBurnCheckedInstruction, parseBurnInstruction, parseCloseAccountInstruction, parseConfidentialDepositInstruction, parseConfidentialTransferInstruction, parseConfidentialTransferWithFeeInstruction, parseConfidentialWithdrawInstruction, parseConfigureConfidentialTransferAccountInstruction, parseCreateAssociatedTokenIdempotentInstruction, parseCreateAssociatedTokenInstruction, parseCreateMetadataAccountV3Instruction, parseCreateNativeMintInstruction, parseDisableConfidentialCreditsInstruction, parseDisableCpiGuardInstruction, parseDisableHarvestToMintInstruction, parseDisableMemoTransfersInstruction, parseDisableNonConfidentialCreditsInstruction, parseEmitTokenMetadataInstruction, parseEmptyConfidentialTransferAccountInstruction, parseEnableConfidentialCreditsInstruction, parseEnableCpiGuardInstruction, parseEnableHarvestToMintInstruction, parseEnableMemoTransfersInstruction, parseEnableNonConfidentialCreditsInstruction, parseFreezeAccountInstruction, parseGetAccountDataSizeInstruction, parseHarvestWithheldTokensToMintForConfidentialTransferFeeInstruction, parseHarvestWithheldTokensToMintInstruction, parseInitializeAccount2Instruction, parseInitializeAccount3Instruction, parseInitializeAccountInstruction, parseInitializeConfidentialTransferFeeInstruction, parseInitializeConfidentialTransferMintInstruction, parseInitializeDefaultAccountStateInstruction, parseInitializeGroupMemberPointerInstruction, parseInitializeGroupPointerInstruction, parseInitializeImmutableOwnerInstruction, parseInitializeInterestBearingMintInstruction, parseInitializeMetadataPointerInstruction, parseInitializeMint2Instruction, parseInitializeMintCloseAuthorityInstruction, parseInitializeMintInstruction, parseInitializeMultisig2Instruction, parseInitializeMultisigInstruction, parseInitializeNonTransferableMintInstruction, parseInitializePausableConfigInstruction, parseInitializePermanentDelegateInstruction, parseInitializeScaledUiAmountMintInstruction, parseInitializeTokenGroupInstruction, parseInitializeTokenGroupMemberInstruction, parseInitializeTokenMetadataInstruction, parseInitializeTransferFeeConfigInstruction, parseInitializeTransferHookInstruction, parseMintToCheckedInstruction, parseMintToInstruction, parsePauseInstruction, parseReallocateInstruction, parseRecoverNestedAssociatedTokenInstruction, parseRemoveTokenMetadataKeyInstruction, parseResumeInstruction, parseRevokeInstruction, parseSetAuthorityInstruction, parseSetTransferFeeInstruction, parseSyncNativeInstruction, parseThawAccountInstruction, parseTokenProgramAddressOrMoniker, parseTransferCheckedInstruction, parseTransferCheckedWithFeeInstruction, parseTransferInstruction, parseUiAmountToAmountInstruction, parseUpdateConfidentialTransferMintInstruction, parseUpdateDefaultAccountStateInstruction, parseUpdateGroupMemberPointerInstruction, parseUpdateGroupPointerInstruction, parseUpdateMetadataPointerInstruction, parseUpdateMultiplierScaledUiMintInstruction, parseUpdateRateInterestBearingMintInstruction, parseUpdateTokenGroupMaxSizeInstruction, parseUpdateTokenGroupUpdateAuthorityInstruction, parseUpdateTokenMetadataFieldInstruction, parseUpdateTokenMetadataUpdateAuthorityInstruction, parseUpdateTransferHookInstruction, parseWithdrawExcessLamportsInstruction, parseWithdrawWithheldTokensFromAccountsForConfidentialTransferFeeInstruction, parseWithdrawWithheldTokensFromAccountsInstruction, parseWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction, parseWithdrawWithheldTokensFromMintInstruction, tokenAmountToUiAmount, tokenMetadataField, tokenUiAmountToAmount, uiAmountToAmountForInterestBearingMintWithoutSimulation, uiAmountToAmountForMintWithoutSimulation, uiAmountToAmountForScaledUiAmountMintWithoutSimulation } from '../chunk-ZYQZBNRK.node.mjs';
export { hasSetComputeLimitInstruction, hasSetComputeUnitPriceInstruction, isSetComputeLimitInstruction, isSetComputeUnitPriceInstruction } from '../chunk-VC6NKDS2.node.mjs';
export { ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR, ALLOCATE_DISCRIMINATOR, ALLOCATE_WITH_SEED_DISCRIMINATOR, ASSIGN_DISCRIMINATOR, ASSIGN_WITH_SEED_DISCRIMINATOR, AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR, CREATE_ACCOUNT_DISCRIMINATOR, CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR, INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR, NonceState, NonceVersion, SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE, SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH, SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH, SYSTEM_ERROR__INVALID_PROGRAM_ID, SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED, SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED, SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES, SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE, SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS, SYSTEM_PROGRAM_ADDRESS, SystemAccount, SystemInstruction, TRANSFER_SOL_DISCRIMINATOR, TRANSFER_SOL_WITH_SEED_DISCRIMINATOR, UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR, WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR, decodeNonce, fetchAllMaybeNonce, fetchAllNonce, fetchMaybeNonce, fetchNonce, getAdvanceNonceAccountDiscriminatorBytes, getAdvanceNonceAccountInstruction, getAdvanceNonceAccountInstructionDataCodec, getAdvanceNonceAccountInstructionDataDecoder, getAdvanceNonceAccountInstructionDataEncoder, getAllocateDiscriminatorBytes, getAllocateInstruction, getAllocateInstructionDataCodec, getAllocateInstructionDataDecoder, getAllocateInstructionDataEncoder, getAllocateWithSeedDiscriminatorBytes, getAllocateWithSeedInstruction, getAllocateWithSeedInstructionDataCodec, getAllocateWithSeedInstructionDataDecoder, getAllocateWithSeedInstructionDataEncoder, getAssignDiscriminatorBytes, getAssignInstruction, getAssignInstructionDataCodec, getAssignInstructionDataDecoder, getAssignInstructionDataEncoder, getAssignWithSeedDiscriminatorBytes, getAssignWithSeedInstruction, getAssignWithSeedInstructionDataCodec, getAssignWithSeedInstructionDataDecoder, getAssignWithSeedInstructionDataEncoder, getAuthorizeNonceAccountDiscriminatorBytes, getAuthorizeNonceAccountInstruction, getAuthorizeNonceAccountInstructionDataCodec, getAuthorizeNonceAccountInstructionDataDecoder, getAuthorizeNonceAccountInstructionDataEncoder, getCreateAccountDiscriminatorBytes, getCreateAccountInstruction, getCreateAccountInstructionDataCodec, getCreateAccountInstructionDataDecoder, getCreateAccountInstructionDataEncoder, getCreateAccountWithSeedDiscriminatorBytes, getCreateAccountWithSeedInstruction, getCreateAccountWithSeedInstructionDataCodec, getCreateAccountWithSeedInstructionDataDecoder, getCreateAccountWithSeedInstructionDataEncoder, getInitializeNonceAccountDiscriminatorBytes, getInitializeNonceAccountInstruction, getInitializeNonceAccountInstructionDataCodec, getInitializeNonceAccountInstructionDataDecoder, getInitializeNonceAccountInstructionDataEncoder, getNonceCodec, getNonceDecoder, getNonceEncoder, getNonceSize, getNonceStateCodec, getNonceStateDecoder, getNonceStateEncoder, getNonceVersionCodec, getNonceVersionDecoder, getNonceVersionEncoder, getSystemErrorMessage, getTransferSolDiscriminatorBytes, getTransferSolInstruction, getTransferSolInstructionDataCodec, getTransferSolInstructionDataDecoder, getTransferSolInstructionDataEncoder, getTransferSolWithSeedDiscriminatorBytes, getTransferSolWithSeedInstruction, getTransferSolWithSeedInstructionDataCodec, getTransferSolWithSeedInstructionDataDecoder, getTransferSolWithSeedInstructionDataEncoder, getUpgradeNonceAccountDiscriminatorBytes, getUpgradeNonceAccountInstruction, getUpgradeNonceAccountInstructionDataCodec, getUpgradeNonceAccountInstructionDataDecoder, getUpgradeNonceAccountInstructionDataEncoder, getWithdrawNonceAccountDiscriminatorBytes, getWithdrawNonceAccountInstruction, getWithdrawNonceAccountInstructionDataCodec, getWithdrawNonceAccountInstructionDataDecoder, getWithdrawNonceAccountInstructionDataEncoder, identifySystemInstruction, isSystemError, parseAdvanceNonceAccountInstruction, parseAllocateInstruction, parseAllocateWithSeedInstruction, parseAssignInstruction, parseAssignWithSeedInstruction, parseAuthorizeNonceAccountInstruction, parseCreateAccountInstruction, parseCreateAccountWithSeedInstruction, parseInitializeNonceAccountInstruction, parseTransferSolInstruction, parseTransferSolWithSeedInstruction, parseUpgradeNonceAccountInstruction, parseWithdrawNonceAccountInstruction } from '@solana-program/system';
export { COMPUTE_BUDGET_PROGRAM_ADDRESS, ComputeBudgetInstruction, MAX_COMPUTE_UNIT_LIMIT, PROVISORY_COMPUTE_UNIT_LIMIT, REQUEST_HEAP_FRAME_DISCRIMINATOR, REQUEST_UNITS_DISCRIMINATOR, SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR, SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR, SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR, estimateAndUpdateProvisoryComputeUnitLimitFactory, estimateComputeUnitLimitFactory, fillProvisorySetComputeUnitLimitInstruction, getRequestHeapFrameDiscriminatorBytes, getRequestHeapFrameInstruction, getRequestHeapFrameInstructionDataCodec, getRequestHeapFrameInstructionDataDecoder, getRequestHeapFrameInstructionDataEncoder, getRequestUnitsDiscriminatorBytes, getRequestUnitsInstruction, getRequestUnitsInstructionDataCodec, getRequestUnitsInstructionDataDecoder, getRequestUnitsInstructionDataEncoder, getSetComputeUnitLimitDiscriminatorBytes, getSetComputeUnitLimitInstruction, getSetComputeUnitLimitInstructionDataCodec, getSetComputeUnitLimitInstructionDataDecoder, getSetComputeUnitLimitInstructionDataEncoder, getSetComputeUnitPriceDiscriminatorBytes, getSetComputeUnitPriceInstruction, getSetComputeUnitPriceInstructionDataCodec, getSetComputeUnitPriceInstructionDataDecoder, getSetComputeUnitPriceInstructionDataEncoder, getSetLoadedAccountsDataSizeLimitDiscriminatorBytes, getSetLoadedAccountsDataSizeLimitInstruction, getSetLoadedAccountsDataSizeLimitInstructionDataCodec, getSetLoadedAccountsDataSizeLimitInstructionDataDecoder, getSetLoadedAccountsDataSizeLimitInstructionDataEncoder, identifyComputeBudgetInstruction, parseRequestHeapFrameInstruction, parseRequestUnitsInstruction, parseSetComputeUnitLimitInstruction, parseSetComputeUnitPriceInstruction, parseSetLoadedAccountsDataSizeLimitInstruction, setTransactionMessageComputeUnitPrice, updateOrAppendSetComputeUnitLimitInstruction, updateOrAppendSetComputeUnitPriceInstruction } from '@solana-program/compute-budget';
export { ADDRESS_LOOKUP_TABLE_DISCRIMINATOR, ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, AddressLookupTableAccount, AddressLookupTableInstruction, CLOSE_LOOKUP_TABLE_DISCRIMINATOR, CREATE_LOOKUP_TABLE_DISCRIMINATOR, DEACTIVATE_LOOKUP_TABLE_DISCRIMINATOR, EXTEND_LOOKUP_TABLE_DISCRIMINATOR, FREEZE_LOOKUP_TABLE_DISCRIMINATOR, decodeAddressLookupTable, fetchAddressLookupTable, fetchAddressLookupTableFromSeeds, fetchAllAddressLookupTable, fetchAllMaybeAddressLookupTable, fetchMaybeAddressLookupTable, fetchMaybeAddressLookupTableFromSeeds, findAddressLookupTablePda, getAddressLookupTableCodec, getAddressLookupTableDecoder, getAddressLookupTableDiscriminatorBytes, getAddressLookupTableEncoder, getCloseLookupTableDiscriminatorBytes, getCloseLookupTableInstruction, getCloseLookupTableInstructionDataCodec, getCloseLookupTableInstructionDataDecoder, getCloseLookupTableInstructionDataEncoder, getCreateLookupTableDiscriminatorBytes, getCreateLookupTableInstruction, getCreateLookupTableInstructionAsync, getCreateLookupTableInstructionDataCodec, getCreateLookupTableInstructionDataDecoder, getCreateLookupTableInstructionDataEncoder, getDeactivateLookupTableDiscriminatorBytes, getDeactivateLookupTableInstruction, getDeactivateLookupTableInstructionDataCodec, getDeactivateLookupTableInstructionDataDecoder, getDeactivateLookupTableInstructionDataEncoder, getExtendLookupTableDiscriminatorBytes, getExtendLookupTableInstruction, getExtendLookupTableInstructionDataCodec, getExtendLookupTableInstructionDataDecoder, getExtendLookupTableInstructionDataEncoder, getFreezeLookupTableDiscriminatorBytes, getFreezeLookupTableInstruction, getFreezeLookupTableInstructionDataCodec, getFreezeLookupTableInstructionDataDecoder, getFreezeLookupTableInstructionDataEncoder, identifyAddressLookupTableAccount, identifyAddressLookupTableInstruction, parseCloseLookupTableInstruction, parseCreateLookupTableInstruction, parseDeactivateLookupTableInstruction, parseExtendLookupTableInstruction, parseFreezeLookupTableInstruction } from '@solana-program/address-lookup-table';
import { getStructEncoder, addEncoderSizePrefix, getUtf8Encoder, getU32Encoder, getU16Encoder, getOptionEncoder, getArrayEncoder, getBooleanEncoder, getAddressEncoder, getStructDecoder, addDecoderSizePrefix, getUtf8Decoder, getU32Decoder, getU16Decoder, getOptionDecoder, getArrayDecoder, getBooleanDecoder, getAddressDecoder, combineCodec, getDiscriminatedUnionEncoder, getUnitEncoder, getTupleEncoder, getDiscriminatedUnionDecoder, getUnitDecoder, getTupleDecoder, getU8Encoder, getU8Decoder, getU64Encoder, getU64Decoder, getEnumEncoder, getEnumDecoder, getMapEncoder, getMapDecoder, getBytesEncoder, getBytesDecoder, fixEncoderSize, fixDecoderSize, decodeAccount, assertAccountExists, fetchEncodedAccount, assertAccountsExist, fetchEncodedAccounts, transformEncoder, AccountRole } from '@solana/kit';
import { getStructEncoder as getStructEncoder$1, getUtf8Encoder as getUtf8Encoder$1, getStructDecoder as getStructDecoder$1, getUtf8Decoder as getUtf8Decoder$1, combineCodec as combineCodec$1 } from '@solana/codecs';

function getAssetDataEncoder() {
  return getStructEncoder([
    ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))],
    ["primarySaleHappened", getBooleanEncoder()],
    ["isMutable", getBooleanEncoder()],
    ["tokenStandard", getTokenStandardEncoder()],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())],
    ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ["ruleSet", getOptionEncoder(getAddressEncoder())]
  ]);
}
function getAssetDataDecoder() {
  return getStructDecoder([
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
    ["primarySaleHappened", getBooleanDecoder()],
    ["isMutable", getBooleanDecoder()],
    ["tokenStandard", getTokenStandardDecoder()],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
    ["ruleSet", getOptionDecoder(getAddressDecoder())]
  ]);
}
function getAssetDataCodec() {
  return combineCodec(getAssetDataEncoder(), getAssetDataDecoder());
}
function getCollectionDetailsToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder([
        ["fields", getTupleEncoder([getCollectionDetailsEncoder()])]
      ])
    ]
  ]);
}
function getCollectionDetailsToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder([
        ["fields", getTupleDecoder([getCollectionDetailsDecoder()])]
      ])
    ]
  ]);
}
function getCollectionDetailsToggleCodec() {
  return combineCodec(
    getCollectionDetailsToggleEncoder(),
    getCollectionDetailsToggleDecoder()
  );
}
function collectionDetailsToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCollectionDetailsToggle(kind, value) {
  return value.__kind === kind;
}
function getCollectionToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder([["fields", getTupleEncoder([getCollectionEncoder()])]])
    ]
  ]);
}
function getCollectionToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder([["fields", getTupleDecoder([getCollectionDecoder()])]])
    ]
  ]);
}
function getCollectionToggleCodec() {
  return combineCodec(
    getCollectionToggleEncoder(),
    getCollectionToggleDecoder()
  );
}
function collectionToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCollectionToggle(kind, value) {
  return value.__kind === kind;
}
function getCreateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder([
        ["assetData", getAssetDataEncoder()],
        ["decimals", getOptionEncoder(getU8Encoder())],
        ["printSupply", getOptionEncoder(getPrintSupplyEncoder())]
      ])
    ]
  ]);
}
function getCreateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder([
        ["assetData", getAssetDataDecoder()],
        ["decimals", getOptionDecoder(getU8Decoder())],
        ["printSupply", getOptionDecoder(getPrintSupplyDecoder())]
      ])
    ]
  ]);
}
function getCreateArgsCodec() {
  return combineCodec(getCreateArgsEncoder(), getCreateArgsDecoder());
}
function createArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isCreateArgs(kind, value) {
  return value.__kind === kind;
}
function getDataEncoder() {
  return getStructEncoder([
    ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["symbol", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["uri", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ["sellerFeeBasisPoints", getU16Encoder()],
    ["creators", getOptionEncoder(getArrayEncoder(getCreatorEncoder()))]
  ]);
}
function getDataDecoder() {
  return getStructDecoder([
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["symbol", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["uri", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["sellerFeeBasisPoints", getU16Decoder()],
    ["creators", getOptionDecoder(getArrayDecoder(getCreatorDecoder()))]
  ]);
}
function getDataCodec() {
  return combineCodec(getDataEncoder(), getDataDecoder());
}
function getDelegateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "CollectionV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "SaleV1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "TransferV1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "DataV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "UtilityV1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "StakingV1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    ["StandardV1", getStructEncoder([["amount", getU64Encoder()]])],
    [
      "LockedTransferV1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["lockedAddress", getAddressEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "ProgrammableConfigV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AuthorityItemV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "DataItemV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "CollectionItemV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "ProgrammableConfigItemV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "PrintDelegateV1",
      getStructEncoder([
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getDelegateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "CollectionV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "SaleV1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "TransferV1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "DataV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "UtilityV1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "StakingV1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    ["StandardV1", getStructDecoder([["amount", getU64Decoder()]])],
    [
      "LockedTransferV1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["lockedAddress", getAddressDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "ProgrammableConfigV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AuthorityItemV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "DataItemV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "CollectionItemV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "ProgrammableConfigItemV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "PrintDelegateV1",
      getStructDecoder([
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getDelegateArgsCodec() {
  return combineCodec(getDelegateArgsEncoder(), getDelegateArgsDecoder());
}
function delegateArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isDelegateArgs(kind, value) {
  return value.__kind === kind;
}
function getEscrowAuthorityEncoder() {
  return getDiscriminatedUnionEncoder([
    ["TokenOwner", getUnitEncoder()],
    [
      "Creator",
      getStructEncoder([["fields", getTupleEncoder([getAddressEncoder()])]])
    ]
  ]);
}
function getEscrowAuthorityDecoder() {
  return getDiscriminatedUnionDecoder([
    ["TokenOwner", getUnitDecoder()],
    [
      "Creator",
      getStructDecoder([["fields", getTupleDecoder([getAddressDecoder()])]])
    ]
  ]);
}
function getEscrowAuthorityCodec() {
  return combineCodec(getEscrowAuthorityEncoder(), getEscrowAuthorityDecoder());
}
function escrowAuthority(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isEscrowAuthority(kind, value) {
  return value.__kind === kind;
}
var Key = /* @__PURE__ */ ((Key2) => {
  Key2[Key2["Uninitialized"] = 0] = "Uninitialized";
  Key2[Key2["EditionV1"] = 1] = "EditionV1";
  Key2[Key2["MasterEditionV1"] = 2] = "MasterEditionV1";
  Key2[Key2["ReservationListV1"] = 3] = "ReservationListV1";
  Key2[Key2["MetadataV1"] = 4] = "MetadataV1";
  Key2[Key2["ReservationListV2"] = 5] = "ReservationListV2";
  Key2[Key2["MasterEditionV2"] = 6] = "MasterEditionV2";
  Key2[Key2["EditionMarker"] = 7] = "EditionMarker";
  Key2[Key2["UseAuthorityRecord"] = 8] = "UseAuthorityRecord";
  Key2[Key2["CollectionAuthorityRecord"] = 9] = "CollectionAuthorityRecord";
  Key2[Key2["TokenOwnedEscrow"] = 10] = "TokenOwnedEscrow";
  Key2[Key2["TokenRecord"] = 11] = "TokenRecord";
  Key2[Key2["MetadataDelegate"] = 12] = "MetadataDelegate";
  Key2[Key2["EditionMarkerV2"] = 13] = "EditionMarkerV2";
  Key2[Key2["HolderDelegate"] = 14] = "HolderDelegate";
  return Key2;
})(Key || {});
function getKeyEncoder() {
  return getEnumEncoder(Key);
}
function getKeyDecoder() {
  return getEnumDecoder(Key);
}
function getKeyCodec() {
  return combineCodec(getKeyEncoder(), getKeyDecoder());
}
function getMintArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder([
        ["amount", getU64Encoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getMintArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder([
        ["amount", getU64Decoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getMintArgsCodec() {
  return combineCodec(getMintArgsEncoder(), getMintArgsDecoder());
}
function mintArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isMintArgs(kind, value) {
  return value.__kind === kind;
}
function getPayloadEncoder() {
  return getStructEncoder([
    [
      "map",
      getMapEncoder(
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
        getPayloadTypeEncoder()
      )
    ]
  ]);
}
function getPayloadDecoder() {
  return getStructDecoder([
    [
      "map",
      getMapDecoder(
        addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        getPayloadTypeDecoder()
      )
    ]
  ]);
}
function getPayloadCodec() {
  return combineCodec(getPayloadEncoder(), getPayloadDecoder());
}
function getProgrammableConfigEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder([["ruleSet", getOptionEncoder(getAddressEncoder())]])
    ]
  ]);
}
function getProgrammableConfigDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder([["ruleSet", getOptionDecoder(getAddressDecoder())]])
    ]
  ]);
}
function getProgrammableConfigCodec() {
  return combineCodec(
    getProgrammableConfigEncoder(),
    getProgrammableConfigDecoder()
  );
}
function programmableConfig(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isProgrammableConfig(kind, value) {
  return value.__kind === kind;
}
function getReservationEncoder() {
  return getStructEncoder([
    ["address", getAddressEncoder()],
    ["spotsRemaining", getU64Encoder()],
    ["totalSpots", getU64Encoder()]
  ]);
}
function getReservationDecoder() {
  return getStructDecoder([
    ["address", getAddressDecoder()],
    ["spotsRemaining", getU64Decoder()],
    ["totalSpots", getU64Decoder()]
  ]);
}
function getReservationCodec() {
  return combineCodec(getReservationEncoder(), getReservationDecoder());
}
var TokenStandard = /* @__PURE__ */ ((TokenStandard2) => {
  TokenStandard2[TokenStandard2["NonFungible"] = 0] = "NonFungible";
  TokenStandard2[TokenStandard2["FungibleAsset"] = 1] = "FungibleAsset";
  TokenStandard2[TokenStandard2["Fungible"] = 2] = "Fungible";
  TokenStandard2[TokenStandard2["NonFungibleEdition"] = 3] = "NonFungibleEdition";
  TokenStandard2[TokenStandard2["ProgrammableNonFungible"] = 4] = "ProgrammableNonFungible";
  TokenStandard2[TokenStandard2["ProgrammableNonFungibleEdition"] = 5] = "ProgrammableNonFungibleEdition";
  return TokenStandard2;
})(TokenStandard || {});
function getTokenStandardEncoder() {
  return getEnumEncoder(TokenStandard);
}
function getTokenStandardDecoder() {
  return getEnumDecoder(TokenStandard);
}
function getTokenStandardCodec() {
  return combineCodec(getTokenStandardEncoder(), getTokenStandardDecoder());
}
function getUpdateArgsEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "V1",
      getStructEncoder([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["data", getOptionEncoder(getDataEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["collection", getCollectionToggleEncoder()],
        ["collectionDetails", getCollectionDetailsToggleEncoder()],
        ["uses", getUsesToggleEncoder()],
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsUpdateAuthorityV2",
      getStructEncoder([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["data", getOptionEncoder(getDataEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["collection", getCollectionToggleEncoder()],
        ["collectionDetails", getCollectionDetailsToggleEncoder()],
        ["uses", getUsesToggleEncoder()],
        ["ruleSet", getRuleSetToggleEncoder()],
        ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsAuthorityItemDelegateV2",
      getStructEncoder([
        ["newUpdateAuthority", getOptionEncoder(getAddressEncoder())],
        ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
        ["isMutable", getOptionEncoder(getBooleanEncoder())],
        ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsCollectionDelegateV2",
      getStructEncoder([
        ["collection", getCollectionToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsDataDelegateV2",
      getStructEncoder([
        ["data", getOptionEncoder(getDataEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsProgrammableConfigDelegateV2",
      getStructEncoder([
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsDataItemDelegateV2",
      getStructEncoder([
        ["data", getOptionEncoder(getDataEncoder())],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsCollectionItemDelegateV2",
      getStructEncoder([
        ["collection", getCollectionToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ],
    [
      "AsProgrammableConfigItemDelegateV2",
      getStructEncoder([
        ["ruleSet", getRuleSetToggleEncoder()],
        ["authorizationData", getOptionEncoder(getAuthorizationDataEncoder())]
      ])
    ]
  ]);
}
function getUpdateArgsDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "V1",
      getStructDecoder([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["data", getOptionDecoder(getDataDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["collection", getCollectionToggleDecoder()],
        ["collectionDetails", getCollectionDetailsToggleDecoder()],
        ["uses", getUsesToggleDecoder()],
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsUpdateAuthorityV2",
      getStructDecoder([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["data", getOptionDecoder(getDataDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["collection", getCollectionToggleDecoder()],
        ["collectionDetails", getCollectionDetailsToggleDecoder()],
        ["uses", getUsesToggleDecoder()],
        ["ruleSet", getRuleSetToggleDecoder()],
        ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsAuthorityItemDelegateV2",
      getStructDecoder([
        ["newUpdateAuthority", getOptionDecoder(getAddressDecoder())],
        ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
        ["isMutable", getOptionDecoder(getBooleanDecoder())],
        ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsCollectionDelegateV2",
      getStructDecoder([
        ["collection", getCollectionToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsDataDelegateV2",
      getStructDecoder([
        ["data", getOptionDecoder(getDataDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsProgrammableConfigDelegateV2",
      getStructDecoder([
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsDataItemDelegateV2",
      getStructDecoder([
        ["data", getOptionDecoder(getDataDecoder())],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsCollectionItemDelegateV2",
      getStructDecoder([
        ["collection", getCollectionToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ],
    [
      "AsProgrammableConfigItemDelegateV2",
      getStructDecoder([
        ["ruleSet", getRuleSetToggleDecoder()],
        ["authorizationData", getOptionDecoder(getAuthorizationDataDecoder())]
      ])
    ]
  ]);
}
function getUpdateArgsCodec() {
  return combineCodec(getUpdateArgsEncoder(), getUpdateArgsDecoder());
}
function updateArgs(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isUpdateArgs(kind, value) {
  return value.__kind === kind;
}
function getUsesToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder([["fields", getTupleEncoder([getUsesEncoder()])]])
    ]
  ]);
}
function getUsesToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder([["fields", getTupleDecoder([getUsesDecoder()])]])
    ]
  ]);
}
function getUsesToggleCodec() {
  return combineCodec(getUsesToggleEncoder(), getUsesToggleDecoder());
}
function usesToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isUsesToggle(kind, value) {
  return value.__kind === kind;
}
function getRuleSetToggleEncoder() {
  return getDiscriminatedUnionEncoder([
    ["None", getUnitEncoder()],
    ["Clear", getUnitEncoder()],
    [
      "Set",
      getStructEncoder([["fields", getTupleEncoder([getAddressEncoder()])]])
    ]
  ]);
}
function getRuleSetToggleDecoder() {
  return getDiscriminatedUnionDecoder([
    ["None", getUnitDecoder()],
    ["Clear", getUnitDecoder()],
    [
      "Set",
      getStructDecoder([["fields", getTupleDecoder([getAddressDecoder()])]])
    ]
  ]);
}
function getRuleSetToggleCodec() {
  return combineCodec(getRuleSetToggleEncoder(), getRuleSetToggleDecoder());
}
function ruleSetToggle(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isRuleSetToggle(kind, value) {
  return value.__kind === kind;
}
function getAuthorizationDataEncoder() {
  return getStructEncoder([["payload", getPayloadEncoder()]]);
}
function getAuthorizationDataDecoder() {
  return getStructDecoder([["payload", getPayloadDecoder()]]);
}
function getAuthorizationDataCodec() {
  return combineCodec(
    getAuthorizationDataEncoder(),
    getAuthorizationDataDecoder()
  );
}
function getPayloadTypeEncoder() {
  return getDiscriminatedUnionEncoder([
    [
      "Pubkey",
      getStructEncoder([["fields", getTupleEncoder([getAddressEncoder()])]])
    ],
    [
      "Seeds",
      getStructEncoder([["fields", getTupleEncoder([getSeedsVecEncoder()])]])
    ],
    [
      "MerkleProof",
      getStructEncoder([["fields", getTupleEncoder([getProofInfoEncoder()])]])
    ],
    [
      "Number",
      getStructEncoder([["fields", getTupleEncoder([getU64Encoder()])]])
    ]
  ]);
}
function getPayloadTypeDecoder() {
  return getDiscriminatedUnionDecoder([
    [
      "Pubkey",
      getStructDecoder([["fields", getTupleDecoder([getAddressDecoder()])]])
    ],
    [
      "Seeds",
      getStructDecoder([["fields", getTupleDecoder([getSeedsVecDecoder()])]])
    ],
    [
      "MerkleProof",
      getStructDecoder([["fields", getTupleDecoder([getProofInfoDecoder()])]])
    ],
    [
      "Number",
      getStructDecoder([["fields", getTupleDecoder([getU64Decoder()])]])
    ]
  ]);
}
function getPayloadTypeCodec() {
  return combineCodec(getPayloadTypeEncoder(), getPayloadTypeDecoder());
}
function payloadType(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isPayloadType(kind, value) {
  return value.__kind === kind;
}
function getSeedsVecEncoder() {
  return getStructEncoder([
    [
      "seeds",
      getArrayEncoder(addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()))
    ]
  ]);
}
function getSeedsVecDecoder() {
  return getStructDecoder([
    [
      "seeds",
      getArrayDecoder(addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()))
    ]
  ]);
}
function getSeedsVecCodec() {
  return combineCodec(getSeedsVecEncoder(), getSeedsVecDecoder());
}
function getProofInfoEncoder() {
  return getStructEncoder([
    ["proof", getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))]
  ]);
}
function getProofInfoDecoder() {
  return getStructDecoder([
    ["proof", getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))]
  ]);
}
function getProofInfoCodec() {
  return combineCodec(getProofInfoEncoder(), getProofInfoDecoder());
}
function getPrintSupplyEncoder() {
  return getDiscriminatedUnionEncoder([
    ["Zero", getUnitEncoder()],
    [
      "Limited",
      getStructEncoder([["fields", getTupleEncoder([getU64Encoder()])]])
    ],
    ["Unlimited", getUnitEncoder()]
  ]);
}
function getPrintSupplyDecoder() {
  return getDiscriminatedUnionDecoder([
    ["Zero", getUnitDecoder()],
    [
      "Limited",
      getStructDecoder([["fields", getTupleDecoder([getU64Decoder()])]])
    ],
    ["Unlimited", getUnitDecoder()]
  ]);
}
function getPrintSupplyCodec() {
  return combineCodec(getPrintSupplyEncoder(), getPrintSupplyDecoder());
}
function printSupply(kind, data) {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data ?? {} };
}
function isPrintSupply(kind, value) {
  return value.__kind === kind;
}

// src/programs/token-metadata/generated/accounts/metadata.ts
function getMetadataEncoder() {
  return getStructEncoder([
    ["key", getKeyEncoder()],
    ["updateAuthority", getAddressEncoder()],
    ["mint", getAddressEncoder()],
    ["data", getDataEncoder()],
    ["primarySaleHappened", getBooleanEncoder()],
    ["isMutable", getBooleanEncoder()],
    ["editionNonce", getOptionEncoder(getU8Encoder())],
    ["tokenStandard", getOptionEncoder(getTokenStandardEncoder())],
    ["collection", getOptionEncoder(getCollectionEncoder())],
    ["uses", getOptionEncoder(getUsesEncoder())],
    ["collectionDetails", getOptionEncoder(getCollectionDetailsEncoder())],
    ["programmableConfig", getOptionEncoder(getProgrammableConfigEncoder())]
  ]);
}
function getMetadataDecoder() {
  return getStructDecoder([
    ["key", getKeyDecoder()],
    ["updateAuthority", getAddressDecoder()],
    ["mint", getAddressDecoder()],
    ["data", getDataDecoder()],
    ["primarySaleHappened", getBooleanDecoder()],
    ["isMutable", getBooleanDecoder()],
    ["editionNonce", getOptionDecoder(getU8Decoder())],
    ["tokenStandard", getOptionDecoder(getTokenStandardDecoder())],
    ["collection", getOptionDecoder(getCollectionDecoder())],
    ["uses", getOptionDecoder(getUsesDecoder())],
    ["collectionDetails", getOptionDecoder(getCollectionDetailsDecoder())],
    ["programmableConfig", getOptionDecoder(getProgrammableConfigDecoder())]
  ]);
}
function getMetadataCodec() {
  return combineCodec(getMetadataEncoder(), getMetadataDecoder());
}
function decodeMetadata(encodedAccount) {
  return decodeAccount(encodedAccount, getMetadataDecoder());
}
async function fetchMetadata(rpc, address, config) {
  const maybeAccount = await fetchMaybeMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
async function fetchMaybeMetadata(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMetadata(maybeAccount);
}
async function fetchAllMetadata(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeMetadata(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
async function fetchAllMaybeMetadata(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMetadata(maybeAccount));
}
var UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR = 15;
function getUpdateMetadataAccountV2DiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR);
}
function getUpdateMetadataAccountV2InstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", getU8Encoder()],
      ["data", getOptionEncoder(getDataV2Encoder())],
      ["updateAuthority", getOptionEncoder(getAddressEncoder())],
      ["primarySaleHappened", getOptionEncoder(getBooleanEncoder())],
      ["isMutable", getOptionEncoder(getBooleanEncoder())]
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR
    })
  );
}
function getUpdateMetadataAccountV2InstructionDataDecoder() {
  return getStructDecoder([
    ["discriminator", getU8Decoder()],
    ["data", getOptionDecoder(getDataV2Decoder())],
    ["updateAuthority", getOptionDecoder(getAddressDecoder())],
    ["primarySaleHappened", getOptionDecoder(getBooleanDecoder())],
    ["isMutable", getOptionDecoder(getBooleanDecoder())]
  ]);
}
function getUpdateMetadataAccountV2InstructionDataCodec() {
  return combineCodec(
    getUpdateMetadataAccountV2InstructionDataEncoder(),
    getUpdateMetadataAccountV2InstructionDataDecoder()
  );
}
function getUpdateMetadataAccountV2Instruction(input, config) {
  const programAddress = config?.programAddress ?? TOKEN_METADATA_PROGRAM_ADDRESS;
  const originalAccounts = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false
    }
  };
  const accounts = originalAccounts;
  const args = { ...input, updateAuthority: input.updateAuthorityArg };
  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.metadata), getAccountMeta(accounts.updateAuthority)],
    programAddress,
    data: getUpdateMetadataAccountV2InstructionDataEncoder().encode(args)
  };
  return instruction;
}
function parseUpdateMetadataAccountV2Instruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      metadata: getNextAccount(),
      updateAuthority: getNextAccount()
    },
    data: getUpdateMetadataAccountV2InstructionDataDecoder().decode(instruction.data)
  };
}

// src/programs/memo/generated/programs/memo.ts
var MEMO_PROGRAM_ADDRESS = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr";
var MemoInstruction = /* @__PURE__ */ ((MemoInstruction2) => {
  MemoInstruction2[MemoInstruction2["AddMemo"] = 0] = "AddMemo";
  return MemoInstruction2;
})(MemoInstruction || {});

// src/programs/memo/generated/instructions/addMemo.ts
function getAddMemoInstructionDataEncoder() {
  return getStructEncoder$1([["memo", getUtf8Encoder$1()]]);
}
function getAddMemoInstructionDataDecoder() {
  return getStructDecoder$1([["memo", getUtf8Decoder$1()]]);
}
function getAddMemoInstructionDataCodec() {
  return combineCodec$1(getAddMemoInstructionDataEncoder(), getAddMemoInstructionDataDecoder());
}
function getAddMemoInstruction(input, config) {
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;
  const args = { ...input };
  const remainingAccounts = (args.signers ?? []).map((signer) => ({
    address: signer.address,
    role: AccountRole.READONLY_SIGNER,
    signer
  }));
  const instruction = {
    accounts: remainingAccounts,
    programAddress,
    data: getAddMemoInstructionDataEncoder().encode(args)
  };
  return instruction;
}
function parseAddMemoInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getAddMemoInstructionDataDecoder().decode(instruction.data)
  };
}

export { Key, MEMO_PROGRAM_ADDRESS, MemoInstruction, TokenStandard, UPDATE_METADATA_ACCOUNT_V2_DISCRIMINATOR, collectionDetailsToggle, collectionToggle, createArgs, decodeMetadata, delegateArgs, escrowAuthority, fetchAllMaybeMetadata, fetchAllMetadata, fetchMaybeMetadata, fetchMetadata, getAddMemoInstruction, getAddMemoInstructionDataCodec, getAddMemoInstructionDataDecoder, getAddMemoInstructionDataEncoder, getAssetDataCodec, getAssetDataDecoder, getAssetDataEncoder, getAuthorizationDataCodec, getAuthorizationDataDecoder, getAuthorizationDataEncoder, getCollectionDetailsToggleCodec, getCollectionDetailsToggleDecoder, getCollectionDetailsToggleEncoder, getCollectionToggleCodec, getCollectionToggleDecoder, getCollectionToggleEncoder, getCreateArgsCodec, getCreateArgsDecoder, getCreateArgsEncoder, getDataCodec, getDataDecoder, getDataEncoder, getDelegateArgsCodec, getDelegateArgsDecoder, getDelegateArgsEncoder, getEscrowAuthorityCodec, getEscrowAuthorityDecoder, getEscrowAuthorityEncoder, getKeyCodec, getKeyDecoder, getKeyEncoder, getMetadataCodec, getMetadataDecoder, getMetadataEncoder, getMintArgsCodec, getMintArgsDecoder, getMintArgsEncoder, getPayloadCodec, getPayloadDecoder, getPayloadEncoder, getPayloadTypeCodec, getPayloadTypeDecoder, getPayloadTypeEncoder, getPrintSupplyCodec, getPrintSupplyDecoder, getPrintSupplyEncoder, getProgrammableConfigCodec, getProgrammableConfigDecoder, getProgrammableConfigEncoder, getProofInfoCodec, getProofInfoDecoder, getProofInfoEncoder, getReservationCodec, getReservationDecoder, getReservationEncoder, getRuleSetToggleCodec, getRuleSetToggleDecoder, getRuleSetToggleEncoder, getSeedsVecCodec, getSeedsVecDecoder, getSeedsVecEncoder, getTokenStandardCodec, getTokenStandardDecoder, getTokenStandardEncoder, getUpdateArgsCodec, getUpdateArgsDecoder, getUpdateArgsEncoder, getUpdateMetadataAccountV2DiscriminatorBytes, getUpdateMetadataAccountV2Instruction, getUpdateMetadataAccountV2InstructionDataCodec, getUpdateMetadataAccountV2InstructionDataDecoder, getUpdateMetadataAccountV2InstructionDataEncoder, getUsesToggleCodec, getUsesToggleDecoder, getUsesToggleEncoder, isCollectionDetailsToggle, isCollectionToggle, isCreateArgs, isDelegateArgs, isEscrowAuthority, isMintArgs, isPayloadType, isPrintSupply, isProgrammableConfig, isRuleSetToggle, isUpdateArgs, isUsesToggle, mintArgs, parseAddMemoInstruction, parseUpdateMetadataAccountV2Instruction, payloadType, printSupply, programmableConfig, ruleSetToggle, updateArgs, usesToggle };
//# sourceMappingURL=index.node.mjs.map
//# sourceMappingURL=index.node.mjs.map