import { type KeyPairSigner } from "@solana/kit";
/**
 * Save an extractable `CryptoKeyPair` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypair - an extractable `CryptoKeyPair`
 * @param filePath - path to file where the keypair will be saved
 */
export declare function saveKeypairToFile(keypair: CryptoKeyPair, filePath: string): Promise<boolean>;
/**
 * Save an extractable `KeyPairSigner` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypairSigner - an extractable `KeyPairSigner`
 * @param filePath - path to file where the keypair will be saved
 */
export declare function saveKeypairSignerToFile(keypairSigner: KeyPairSigner, filePath: string): Promise<boolean>;
/**
 * Save an extractable `CryptoKeyPair` to a local environment file (e.g. `.env`)
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypair - an extractable `CryptoKeyPair`
 * @param variableName - environment variable name accessible via `process.env[variableName]` after env file is loaded
 * @param envFilePath - environment variable file path, default = `.env` in the current working directory
 */
export declare function saveKeypairToEnvFile(keypair: CryptoKeyPair, variableName: string, envFilePath?: string): Promise<void>;
/**
 * Save an extractable `KeyPairSigner` to a filesystem wallet json file
 * (i.e. same format as those generated by the `solana-keygen` command)
 *
 * @param keypairSigner - an extractable `KeyPairSigner`
 * @param variableName - environment variable name accessible via `process.env[variableName]` after env file is loaded
 * @param envFilePath - environment variable file path, default = `.env` in the current working directory
 */
export declare function saveKeypairSignerToEnvFile(keypairSigner: KeyPairSigner, variableName: string, envFilePath?: string): Promise<void>;
//# sourceMappingURL=save-keypair.d.ts.map